---
subcategory: "Network Manager"
layout: "aws"
page_title: "AWS: aws_networkmanager_core_network_policy_attachment"
description: |-
  Provides a Core Network Policy Attachment resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_networkmanager_core_network_policy_attachment

Provides a Core Network Policy Attachment resource. This puts a Core Network Policy to an existing Core Network and executes the change set, which deploys changes globally based on the policy submitted (Sets the policy to `live`).

~> **NOTE:** Deleting this resource will not delete the current policy defined in this resource. Deleting this resource will also not revert the current `live` policy to the previous version.

## Example Usage

### Basic

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkmanagerCoreNetwork } from "./.gen/providers/aws/networkmanager-core-network";
import { NetworkmanagerCoreNetworkPolicyAttachment } from "./.gen/providers/aws/networkmanager-core-network-policy-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new NetworkmanagerCoreNetwork(this, "example", {
      globalNetworkId: Token.asString(awsNetworkmanagerGlobalNetworkExample.id),
    });
    const awsNetworkmanagerCoreNetworkPolicyAttachmentExample =
      new NetworkmanagerCoreNetworkPolicyAttachment(this, "example_1", {
        coreNetworkId: example.id,
        policyDocument: Token.asString(
          dataAwsNetworkmanagerCoreNetworkPolicyDocumentExample.json
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerCoreNetworkPolicyAttachmentExample.overrideLogicalId(
      "example"
    );
  }
}

```

### With VPC Attachment (Single Region)

The example below illustrates the scenario where your policy document has static routes pointing to VPC attachments and you want to attach your VPCs to the core network before applying the desired policy document. Set the `createBasePolicy` argument of the [`awsNetworkmanagerCoreNetwork` resource](/docs/providers/aws/r/networkmanager_core_network.html) to `true` if your core network does not currently have any `live` policies (e.g. this is the first `terraform apply` with the core network resource), since a `live` policy is required before VPCs can be attached to the core network. Otherwise, if your core network already has a `live` policy, you may exclude the `createBasePolicy` argument.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsNetworkmanagerCoreNetworkPolicyDocument } from "./.gen/providers/aws/data-aws-networkmanager-core-network-policy-document";
import { NetworkmanagerCoreNetwork } from "./.gen/providers/aws/networkmanager-core-network";
import { NetworkmanagerCoreNetworkPolicyAttachment } from "./.gen/providers/aws/networkmanager-core-network-policy-attachment";
import { NetworkmanagerGlobalNetwork } from "./.gen/providers/aws/networkmanager-global-network";
import { NetworkmanagerVpcAttachment } from "./.gen/providers/aws/networkmanager-vpc-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new NetworkmanagerGlobalNetwork(this, "example", {});
    const awsNetworkmanagerCoreNetworkExample = new NetworkmanagerCoreNetwork(
      this,
      "example_1",
      {
        createBasePolicy: true,
        globalNetworkId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerCoreNetworkExample.overrideLogicalId("example");
    const awsNetworkmanagerVpcAttachmentExample =
      new NetworkmanagerVpcAttachment(this, "example_2", {
        coreNetworkId: Token.asString(awsNetworkmanagerCoreNetworkExample.id),
        subnetArns: Token.asList(
          Fn.lookupNested(awsSubnetExample, ["*", "arn"])
        ),
        vpcArn: Token.asString(awsVpcExample.arn),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerVpcAttachmentExample.overrideLogicalId("example");
    const dataAwsNetworkmanagerCoreNetworkPolicyDocumentExample =
      new DataAwsNetworkmanagerCoreNetworkPolicyDocument(this, "example_3", {
        coreNetworkConfiguration: [
          {
            asnRanges: ["65022-65534"],
            edgeLocations: [
              {
                location: "us-west-2",
              },
            ],
          },
        ],
        segmentActions: [
          {
            action: "create-route",
            destinationCidrBlocks: ["0.0.0.0/0"],
            destinations: [
              Token.asString(awsNetworkmanagerVpcAttachmentExample.id),
            ],
            segment: "segment",
          },
        ],
        segments: [
          {
            name: "segment",
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsNetworkmanagerCoreNetworkPolicyDocumentExample.overrideLogicalId(
      "example"
    );
    const awsNetworkmanagerCoreNetworkPolicyAttachmentExample =
      new NetworkmanagerCoreNetworkPolicyAttachment(this, "example_4", {
        coreNetworkId: Token.asString(awsNetworkmanagerCoreNetworkExample.id),
        policyDocument: Token.asString(
          dataAwsNetworkmanagerCoreNetworkPolicyDocumentExample.json
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerCoreNetworkPolicyAttachmentExample.overrideLogicalId(
      "example"
    );
  }
}

```

### With VPC Attachment (Multi-Region)

The example below illustrates the scenario where your policy document has static routes pointing to VPC attachments and you want to attach your VPCs to the core network before applying the desired policy document. Set the `createBasePolicy` argument of the [`awsNetworkmanagerCoreNetwork` resource](/docs/providers/aws/r/networkmanager_core_network.html) to `true` if your core network does not currently have any `live` policies (e.g. this is the first `terraform apply` with the core network resource), since a `live` policy is required before VPCs can be attached to the core network. Otherwise, if your core network already has a `live` policy, you may exclude the `createBasePolicy` argument. For multi-region in a core network that does not yet have a `live` policy, pass a list of regions to the `awsNetworkmanagerCoreNetwork` `basePolicyRegions` argument. In the example below, `usWest2` and `usEast1` are specified in the base policy.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsNetworkmanagerCoreNetworkPolicyDocument } from "./.gen/providers/aws/data-aws-networkmanager-core-network-policy-document";
import { NetworkmanagerCoreNetwork } from "./.gen/providers/aws/networkmanager-core-network";
import { NetworkmanagerCoreNetworkPolicyAttachment } from "./.gen/providers/aws/networkmanager-core-network-policy-attachment";
import { NetworkmanagerGlobalNetwork } from "./.gen/providers/aws/networkmanager-global-network";
import { NetworkmanagerVpcAttachment } from "./.gen/providers/aws/networkmanager-vpc-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new NetworkmanagerGlobalNetwork(this, "example", {});
    const awsNetworkmanagerCoreNetworkExample = new NetworkmanagerCoreNetwork(
      this,
      "example_1",
      {
        basePolicyRegions: ["us-west-2", "us-east-1"],
        createBasePolicy: true,
        globalNetworkId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerCoreNetworkExample.overrideLogicalId("example");
    const exampleUsEast1 = new NetworkmanagerVpcAttachment(
      this,
      "example_us_east_1",
      {
        coreNetworkId: Token.asString(awsNetworkmanagerCoreNetworkExample.id),
        provider: "alternate",
        subnetArns: Token.asList(
          Fn.lookupNested(awsSubnetExampleUsEast1, ["*", "arn"])
        ),
        vpcArn: Token.asString(awsVpcExampleUsEast1.arn),
      }
    );
    const exampleUsWest2 = new NetworkmanagerVpcAttachment(
      this,
      "example_us_west_2",
      {
        coreNetworkId: Token.asString(awsNetworkmanagerCoreNetworkExample.id),
        subnetArns: Token.asList(
          Fn.lookupNested(awsSubnetExampleUsWest2, ["*", "arn"])
        ),
        vpcArn: Token.asString(awsVpcExampleUsWest2.arn),
      }
    );
    const dataAwsNetworkmanagerCoreNetworkPolicyDocumentExample =
      new DataAwsNetworkmanagerCoreNetworkPolicyDocument(this, "example_4", {
        coreNetworkConfiguration: [
          {
            asnRanges: ["65022-65534"],
            edgeLocations: [
              {
                location: "us-west-2",
              },
              {
                location: "us-east-1",
              },
            ],
          },
        ],
        segmentActions: [
          {
            action: "create-route",
            destinationCidrBlocks: ["10.0.0.0/16"],
            destinations: [exampleUsWest2.id],
            segment: "segment",
          },
          {
            action: "create-route",
            destinationCidrBlocks: ["10.1.0.0/16"],
            destinations: [exampleUsEast1.id],
            segment: "segment",
          },
        ],
        segments: [
          {
            name: "segment",
          },
          {
            name: "segment2",
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsNetworkmanagerCoreNetworkPolicyDocumentExample.overrideLogicalId(
      "example"
    );
    const awsNetworkmanagerCoreNetworkPolicyAttachmentExample =
      new NetworkmanagerCoreNetworkPolicyAttachment(this, "example_5", {
        coreNetworkId: Token.asString(awsNetworkmanagerCoreNetworkExample.id),
        policyDocument: Token.asString(
          dataAwsNetworkmanagerCoreNetworkPolicyDocumentExample.json
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerCoreNetworkPolicyAttachmentExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `coreNetworkId` - (Required) The ID of the core network that a policy will be attached to and made `live`.
* `policyDocument` - (Required) Policy document for creating a core network. Note that updating this argument will result in the new policy document version being set as the `latest` and `live` policy document. Refer to the [Core network policies documentation](https://docs.aws.amazon.com/network-manager/latest/cloudwan/cloudwan-policy-change-sets.html) for more information.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `update` - (Default `30M`). If this is the first time attaching a policy to a core network then this timeout value is also used as the `create` timeout value.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `state` - Current state of a core network.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `awsNetworkmanagerCoreNetworkPolicyAttachment` using the core network ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

Using `terraform import`, import `awsNetworkmanagerCoreNetworkPolicyAttachment` using the core network ID. For example:

```console
% terraform import aws_networkmanager_core_network_policy_attachment.example core-network-0d47f6t230mz46dy4
```

<!-- cache-key: cdktf-0.18.0 input-a4a290632a29b699528262e5fcc65ac98cae3742a6bd070226dcf0cf22477c51 -->